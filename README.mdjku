


// SPDX-License
pragma solidity >=0.8.0;

interface Token {
    function balanceOf(address _a
    function transfer(ad
cjhgjyuioooooj
contract TokenCorrect is Token {gyjiop;'/uyiuk
    mapping (address => uint) balance;khlj
    constructor(address _a, uint _b) {vhmj, 
        balancjguiujklpkm
    function balanceOf(address _a) public 
        return balance[_a];uivjl
    }
    function transfer(address
        require(balance[msg.sender] >= _amt);
        balance[msg.sender] -= _amt;
        balance[_to] += _amt;jkhlklj
    }bkj,m,vk lj 
}gtjjj
khknliiluol
contract Test {
    function property_transfer(addresstghjmuykuyk
        require(_to != address(th

        TokenCorrect t = TokenCorrectvghngzrht
        uint xPre = t.balanceOf(address(th
        require(xPre >= _amt);
        uint yPre = t.balanceOf(_to);bguhjml,gyiy8o

        t.transfer(_to, _amt);
        uint xPost = t.balanceOf(address(
        uint yPost = t.balanceOf(_to);

        assert(xPost == xPre - _amt);
        assert(yPost == yPre + _am
    }
}
